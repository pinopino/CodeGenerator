@using RazorLight
@using Generator.Template;
@using Generator.Common;
@inherits TemplatePage<ViewInfoWapper>
@{
    DisableEncoding = true;
}
/*
 * @DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")
 * @Model.Config.DALConfig.HeaderNote
 */
@foreach (var u in Model.Config.DALConfig.Using)
{
    @(u.NewLine())
}

namespace @Model.Config.DALConfig.Namespace
{
    namespace Metadata
	{
		public sealed class @(Model.TableInfo.Name)Column : IColumn
		{
			internal @(Model.TableInfo.Name)Column(string table, string name)
			{
				Table = table;
				Name = name;
			}

			public string Name { private set; get; }

			public string Table { private set; get; }

			private bool _orderby;
			public bool OrderBy { get { return this._orderby; } }

			private string _direction;
			public string Direction { get { return this._direction ?? "ASC"; } }

			public @(Model.TableInfo.Name)Column SetOrderByAsc() { this._orderby = true; this._direction = "ASC"; return this; }

			public @(Model.TableInfo.Name)Column SetOrderByDesc() { this._orderby = true; this._direction = "DESC"; return this; }
		}

		public sealed class @(Model.TableInfo.Name)Table
		{
			internal @(Model.TableInfo.Name)Table(string name)
			{
				Name = name;
			}

			public string Name { private set; get; }
	    }
    }

@* 输出类信息 *@
@("public partial class ".Indent() + Model.Config.DALConfig.ClassPrefix +
                            Model.TableInfo.Name +
                            Model.Config.DALConfig.ClassSuffix +
                            (string.IsNullOrWhiteSpace(Model.Config.DALConfig.BaseClass) ? string.Empty : (" : " + Model.Config.DALConfig.BaseClass)))
    {
		public static readonly @(Model.TableInfo.Name)Table Table = new @(Model.TableInfo.Name)Table("@(Model.TableInfo.Name)");

		public sealed class Columns
		{
            @foreach(var column in @Model.TableInfo.Columns)
            {
                @("public static readonly ".Indent(12) + Model.TableInfo.Name + "Column " + column.Name + " = new " + Model.TableInfo.Name + "Column(\"" + Model.TableInfo.Name + "\", \"" + column.Name + "\");".NewLine());
            }
			public static readonly List<@(Model.TableInfo.Name)Column> All = new List<@(Model.TableInfo.Name)Column> { @string.Join(", ", @Model.TableInfo.Columns.Select(p=>p.Name).ToArray()) };
		}
        @* 输出类的方法 *@
        @foreach (var item in Model.Config.DALConfig.Methods)
        {
            var templateLocal = Model.GetPartialViewPath(item);
            if (string.IsNullOrEmpty(templateLocal))
            {
                continue;
            }
            await IncludeAsync(templateLocal, Model);
        }

    }
}